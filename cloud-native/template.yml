AWSTemplateFormatVersion: '2010-09-09'
Description: AstroShop Product Catalog Admin API

Parameters:
  EnvironmentTag:
    Type: String
    Default: astroshop
  ImageRepo:
    Type: String
    Default: oteldemo-productcatalogadmin
  ImageTag:
    Type: String
    Default: server-v1
  StageName:
    Type: String
    Default: Dev
  LogLevel:
    Type: String
    Default: INFO
  EnableXray:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  EnableOneAgentDiagnostics:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false  
  InstrumentCodeWithXray:
    Type: String
    AllowedValues: 
      - true
      - false
    Default: false
  DynatraceSecretArn:
    Type: String
    Default: arn:aws:secretsmanager:us-east-1:512220559759:secret:astroshop-dynatrace-IxzIwM
  TranslationAPIEndpointURL:
    Type: String
    Default: https://fumxh1dirf.execute-api.us-east-1.amazonaws.com/prod/
  TranslationRegionalAPIGWArn:
    Type: String
    Default: arn:aws:execute-api:us-east-1:512220559759:fumxh1dirf
  TranslationDataProcessingS3BucketARN:
    Type: String
    Default: arn:aws:s3:::oteldemocloudnativetranslat-dataprocessings3bucket-hhkmz0rn7oqi
  TranslationDataProcessingFanOutTopicArn:
    Type: String
    Default: arn:aws:sns:us-east-1:512220559759:oteldemocloudnativetranslation-DataProcessingFanOutTopic-qSoPNPH7U9Ru
  AstroshopSecretArn:
    Type: String
    Default: arn:aws:secretsmanager:us-east-1:512220559759:secret:astroshop-product-admin-jh11h8
  VpcPrivateSubnetId:
    Type: String
  VpcSecurityGroupId:
    Type: String

Conditions:
  cXrayEnabled: !Equals 
    - !Ref EnableXray
    - true
  cEnableOneAgentDiagnostics: !Equals 
    - !Ref EnableOneAgentDiagnostics
    - true
  cVpcPrivateSubnetIdEmpty: !Equals [!Ref "VpcPrivateSubnetId", ""]

Resources:

  PublicVPC:
    Type: AWS::EC2::VPC
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
         
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      VpcId: !Ref PublicVPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      VpcId: !Ref PublicVPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
      
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      VpcId: !Ref PublicVPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      VpcId: !Ref PublicVPC
  
  PublicRoute:
    Type: AWS::EC2::Route
    Condition: cVpcPrivateSubnetIdEmpty
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicElasticIP:
    Type: AWS::EC2::EIP
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      Domain: vpc
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
  
  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      AllocationId:
        Fn::GetAtt: [PublicElasticIP, AllocationId]
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      VpcId: !Ref PublicVPC
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
  
  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway
      RouteTableId:
        Ref: PrivateRouteTable
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cVpcPrivateSubnetIdEmpty
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: AstroShop Product Catalog Admin API
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
      Name: !Join ['-', ['astroshop-productcatalog', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductAdminLambdaFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        CacheKeyParameters:
          - 'method.request.path.proxy'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductAdminLambdaFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
      DeploymentId: !Ref ApiGatewayDeployment
      Description: !Sub 'AstroShop Product Catalog Admin API Stage ${StageName}'
      RestApiId: !Ref ApiGatewayRestApi
      TracingEnabled: !If [ cXrayEnabled, "true", "false" ]
      StageName: !Ref StageName

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayRootMethod
      - ApiGatewayProxyMethod
    Properties:
      Description: AstroShop Product Catalog Admin API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt ProductAdminLambdaFunction.Arn

  ProductAdminLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
      LogGroupName: !Sub "/aws/lambda/${ProductAdminLambdaFunction}"

  ProductAdminLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
        - Key: "SERVICE"
          Value: "product-catalog-admin"
      PackageType: Image
      Role: !GetAtt ProductAdminLambdaRole.Arn
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: !Ref LogLevel
        SystemLogLevel: !Ref LogLevel
      TracingConfig: 
        Mode: !If [ cXrayEnabled, "Active" , !Ref AWS::NoValue ]
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageRepo}:${ImageTag}
      VpcConfig:
        SecurityGroupIds:
          - !If [ cVpcPrivateSubnetIdEmpty, Fn::GetAtt: [PublicVPC, DefaultSecurityGroup], !Ref VpcSecurityGroupId ]
        SubnetIds:
          - !If [ cVpcPrivateSubnetIdEmpty, !Ref PrivateSubnet1 , !Ref VpcPrivateSubnetId ]
      Architectures:
        - x86_64
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          PROD: 'true'
          NODE_ENV: 'production'
          DT_LOGLEVELCON: !If [ cEnableOneAgentDiagnostics , "info", !Ref AWS::NoValue ] # info
          DT_LOGCON_PROC: !If [ cEnableOneAgentDiagnostics , "stdout", !Ref AWS::NoValue  ] # stdout
          DT_LOGGING_DESTINATION: !If [ cEnableOneAgentDiagnostics , "stdout", !Ref AWS::NoValue ] # stdout
          DT_LOGGING_NODEJS_FLAGS: !If [ cEnableOneAgentDiagnostics , "Exporter=true,SpanProcessor=true,Propagator=true,Core=true", !Ref AWS::NoValue ] # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
          TRANSLATIONS_ENDPOINT_URI: !Ref TranslationAPIEndpointURL
          INSTRUMENT_WITH_XRAY: !Ref InstrumentCodeWithXray
          AZURE_STORAGE_ACCOUNT_NAME: !Join 
                                        - ''
                                        - - '{{resolve:secretsmanager:'
                                          - !Ref AstroshopSecretArn
                                          - ':SecretString:AZURE_STORAGE_ACCOUNT_NAME}}'
          AZURE_STORAGE_ACCOUNT_KEY: !Join 
                                        - ''
                                        - - '{{resolve:secretsmanager:'
                                          - !Ref AstroshopSecretArn
                                          - ':SecretString:AZURE_STORAGE_ACCOUNT_KEY}}'
          AZURE_STORAGE_CONTAINER_NAME: !Join 
                                        - ''
                                        - - '{{resolve:secretsmanager:'
                                          - !Ref AstroshopSecretArn
                                          - ':SecretString:AZURE_STORAGE_CONTAINER_NAME}}'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
          DT_TENANT: !Join 
                        - ''
                        - - '{{resolve:secretsmanager:'
                          - !Ref DynatraceSecretArn
                          - ':SecretString:DT_TENANT}}'
          DT_CLUSTER_ID: !Join 
                        - ''
                        - - '{{resolve:secretsmanager:'
                          - !Ref DynatraceSecretArn
                          - ':SecretString:DT_CLUSTER_ID}}'
          DT_CONNECTION_BASE_URL: !Join 
                        - ''
                        - - '{{resolve:secretsmanager:'
                          - !Ref DynatraceSecretArn
                          - ':SecretString:DT_URL}}'
          DT_CONNECTION_AUTH_TOKEN: !Join 
                        - ''
                        - - '{{resolve:secretsmanager:'
                          - !Ref DynatraceSecretArn
                          - ':SecretString:DT_CONNECTION_AUTH_TOKEN}}'
          DT_LOG_COLLECTION_AUTH_TOKEN: !Join 
                        - ''
                        - - '{{resolve:secretsmanager:'
                          - !Ref DynatraceSecretArn
                          - ':SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}'
          DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: true
          OTEL_SERVICE_NAME: !Join 
                              - "-"
                              - - !Sub ${AWS::StackName}
                                - product-catalog-admin
                                - !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
          PRODUCT_ADMIN_USER: !Join 
                        - ''
                        - - '{{resolve:secretsmanager:'
                          - !Ref AstroshopSecretArn
                          - ':SecretString:PRODUCT_ADMIN_USER}}'
          PRODUCT_ADMIN_PASSWORD: !Join 
                        - ''
                        - - '{{resolve:secretsmanager:'
                          - !Ref AstroshopSecretArn
                          - ':SecretString:PRODUCT_ADMIN_PASSWORD}}'

  ProductAdminLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "ENVIRONMENT"
          Value: !Ref EnvironmentTag
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
      Policies: 
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:  !Sub "${TranslationDataProcessingS3BucketARN}/*"
        - PolicyName: GWPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Sub "${TranslationRegionalAPIGWArn}/*/*/*"
        - PolicyName: NetworkPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'

  DataProcessingFanOutTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref TranslationDataProcessingFanOutTopicArn
      Endpoint: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/subscription"
      Protocol: https

Outputs:
  AstroShopProductCatalogAdminAPIUrl:
    Description: URL of the AstroShop Product Catalog Admin API Gateway
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"